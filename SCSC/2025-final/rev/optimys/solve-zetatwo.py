#!/usr/bin/env python3

import struct

with open('flag.enc', 'rb') as fin:
    flag_enc = fin.read()

# input parameters
sbox = [ 0x4e, 0xe2, 0xd4, 0x6b, 0xc3, 0x67, 0x47, 0xb2, 0xab, 0x9a, 0x98, 0x6c, 0xd1, 0x78, 0x24, 0x58, 0xdd, 0xb1, 0x6f, 0xbc, 0xf0, 0x81, 0x99, 0x86, 0xdc, 0x84, 0x7f, 0x55, 0xac, 0x4c, 0x3e, 0x52, 0xd7, 0x42, 0x62, 0x56, 0xeb, 0xad, 0xa9, 0xb9, 0xcf, 0x5c, 0xf3, 0x68, 0x4f, 0x8f, 0xd0, 0xe1, 0x41, 0xaa, 0x2f, 0x7c, 0x1e, 0x53, 0x43, 0xd2, 0x5f, 0xff, 0x00, 0xc8, 0x0f, 0xdb, 0x46, 0x08, 0x8e, 0x90, 0x8c, 0x34, 0xe6, 0x23, 0x82, 0x91, 0x1f, 0x9b, 0xe4, 0xf5, 0x95, 0xe5, 0xde, 0xfc, 0xa1, 0x2a, 0x32, 0x7d, 0xf8, 0xda, 0xcd, 0x1b, 0x14, 0xd5, 0xa5, 0x93, 0x75, 0x03, 0xd3, 0xc5, 0x13, 0xfb, 0x96, 0xe7, 0xc1, 0x8b, 0xbb, 0x44, 0x35, 0xf6, 0x3a, 0x77, 0xa6, 0xb0, 0x16, 0x61, 0xc2, 0x70, 0x06, 0x87, 0x4b, 0x40, 0x20, 0x6a, 0x73, 0x83, 0xf1, 0x19, 0x31, 0xe3, 0x1c, 0x94, 0xec, 0x10, 0x79, 0xa2, 0xb3, 0x0b, 0x28, 0x21, 0x9c, 0x97, 0x26, 0xc6, 0xf7, 0x8d, 0xc0, 0x50, 0x80, 0x39, 0x15, 0x0d, 0x60, 0xce, 0x63, 0x49, 0xb4, 0xd6, 0x64, 0xaf, 0x57, 0x54, 0x69, 0x4d, 0xfa, 0x89, 0xbe, 0xa4, 0x9f, 0xe8, 0x29, 0xfd, 0x1a, 0x22, 0x5e, 0xb8, 0xc4, 0x6d, 0x0c, 0x3f, 0x8a, 0xdf, 0xa8, 0xa7, 0xea, 0x02, 0x05, 0xc7, 0x5d, 0x92, 0x45, 0xa3, 0x37, 0xf4, 0x12, 0xfe, 0xef, 0x0a, 0x33, 0x51, 0xcc, 0x3b, 0x25, 0x18, 0x7b, 0xba, 0x4a, 0x85, 0xf2, 0x5a, 0x88, 0xf9, 0x65, 0x2d, 0xcb, 0x3c, 0x1d, 0xe0, 0x36, 0x5b, 0xca, 0xb7, 0x01, 0x48, 0x72, 0xb5, 0x17, 0x11, 0xbd, 0x7e, 0x3d, 0xee, 0x07, 0xbf, 0xe9, 0x38, 0xb6, 0xd8, 0x7a, 0x6e, 0x9e, 0xd9, 0x9d, 0x2e, 0x0e, 0x09, 0x59, 0x2b, 0x2c, 0xc9, 0xed, 0x74, 0x27, 0x71, 0x76, 0xae, 0xa0, 0x30, 0x04, 0x66 ]
mask1 = 0b0000111000011100101011110110110101000000011110110001011111001100;
mask2 = 0b1001110100011111101000010000000011110011000001010110011110111110;
key = [ 0xfd, 0x47, 0x5f, 0xb6, 0xf9, 0x5f, 0xff, 0xf6, 0x71, 0x74, 0x9c, 0x4e, 0x36, 0xbb, 0xe5, 0x2b]

# derived parameters
sbox_inv = [sbox.index(i) for i in range(len(sbox))]
assert all(sbox_inv[sbox[i]] == i for i in range(256))
keyb = bytes(key)
mask1idx_a = []
mask1idx_b = []
mask2idx_a = []
mask2idx_b = []
for i in range(64):
    if (mask1>>i)&1:
        mask1idx_a.append(i)
    else:
        mask1idx_b.append(i)
    if (mask2>>i)&1:
        mask2idx_a.append(i)
    else:
        mask2idx_b.append(i)
assert set(mask1idx_a)|set(mask1idx_b) == set(range(64))
assert set(mask2idx_a)|set(mask2idx_b) == set(range(64))

def xorblock(a: bytes, b: bytes):
    return bytes(x^y for x,y in zip(a,b))

def decrypt_substitute(block: bytes):
    return bytes(sbox_inv[x] for x in block)

def decrypt_permute(block: bytes):
    in_bits = [int(x) for x in ''.join(f'{x:08b}' for x in block[::-1])]
    assert len(in_bits) == 128
    #print(f'{left:#018x}-{right:#018x}')

    l2, r2, r1, l1 = in_bits[0*32:1*32], in_bits[1*32:2*32], in_bits[2*32:3*32], in_bits[3*32:4*32]
    l1d = int(''.join(f'{x}' for x in l1), 2)
    l2d = int(''.join(f'{x}' for x in l2), 2)
    r1d = int(''.join(f'{x}' for x in r1), 2)
    r2d = int(''.join(f'{x}' for x in r2), 2)
    print(f'{l1d:#x}, {l2d:#x}, {r1d:#x}, {r2d:#x}')

    left = [None]*64
    right = [None]*64
    
    for from_idx, to_idx in enumerate(mask1idx_a):
        left[to_idx] = l1[::-1][from_idx]
    for from_idx, to_idx in enumerate(mask1idx_b):
        left[to_idx] = l2[::-1][from_idx]
    for from_idx, to_idx in enumerate(mask2idx_a):
        right[to_idx] = r1[::-1][from_idx]
    for from_idx, to_idx in enumerate(mask2idx_b):
        right[to_idx] = r2[::-1][from_idx]

    leftd = int(''.join(f'{b}' for b in left[::-1]), 2)
    rightd = int(''.join(f'{b}' for b in right[::-1]), 2)

    print(f'{leftd:#x}-{rightd:#x}')

    res = ''.join(f'{b}' for b in (left+right)[::-1])
    print('bits', res)
    block = int(res, 2).to_bytes(16, 'little')

    return block

def decrypt_round(block: bytes, round_key: bytes):
    print('pre perm', block.hex())
    block = decrypt_permute(block)
    print('pre sub', block.hex())
    block = decrypt_substitute(block)
    print('post sub', block.hex())
    block = xorblock(block, round_key)
    print('round key', round_key.hex())
    return block

def decrypt(block: bytes, key: bytes):
    print('input', block.hex())
    round_mul = [7]*8
    round_keys = []
    key_ints = struct.unpack('<8H', key)
    for i in range(9):
        key_ints = [(x*y)&0xFFFF for x,y in zip(round_mul, key_ints)]
        round_key = struct.pack('<8H', *key_ints)
        round_keys.append(round_key)
    
    round_keys = round_keys[::-1]
    print('round key', round_keys[0].hex())
    block = xorblock(block, round_keys[0])
    print('block', block.hex())
    for round, round_key in enumerate(round_keys[1:]):
        print('round key', round_key.hex())
        block = decrypt_round(block, round_key)
        print('block', block.hex())
    
    return block
    
testblock = bytes([0]*16)
testblock = bytes.fromhex('1ed1 6658 de3f 23f8 03a1 a145 4ce8 6ff4')

testres = decrypt(testblock, keyb)
print(testres.hex())

flag = b''
for i in range(0, len(flag_enc), 16):
    flag_part = decrypt(flag_enc[i:i+16], keyb)
    flag += flag_part

print(flag[:-flag[-1]].decode())
