from matplotlib import pyplot as plt
import numpy as np
import string
from random import choices, seed, randint
from itertools import cycle
import itertools


seed(0x42)

CANVAS_PADDING = 10
PADDING = 2
N_LETTER_PER_ROW = 120
N_ROWS = 15
LETTER_SIZE = 8

LETTER_BOX_SIZE = LETTER_SIZE + 2 * PADDING

FLAG_ALPHABET = string.ascii_letters + string.digits
KEY_ALPHABET = ' ' + string.ascii_letters + string.digits

FLAG_LEN = N_LETTER_PER_ROW
KEY_LEN = N_LETTER_PER_ROW
FLAG = " SSM{Next_time_I_should_probably_ask_ChatGPT_instead_of_guessing}"

FLAG_POS = N_LETTER_PER_ROW * (N_ROWS - 1) - len(FLAG)

FONT_REF = "Font from https://github.com/dhepper/font8x8/blob/master/font8x8_basic.h"
alphabet_bitmap = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0000 (nul)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0001
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0002
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0003
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0004
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0005
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0006
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0007
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0008
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0009
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+000A
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+000B
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+000C
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+000D
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+000E
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+000F
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0010
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0011
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0012
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0013
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0014
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0015
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0016
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0017
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0018
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0019
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+001A
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+001B
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+001C
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+001D
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+001E
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+001F
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0020 (space)
    [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],  # U+0021 (!)
    [0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0022 (")
    [0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00],  # U+0023 (#)
    [0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00],  # U+0024 ($)
    [0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00],  # U+0025 (%)
    [0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00],  # U+0026 (&)
    [0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0027 (')
    [0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00],  # U+0028 (()
    [0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00],  # U+0029 ())
    [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],  # U+002A (*)
    [0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00],  # U+002B (+)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06],  # U+002C (,)
    [0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00],  # U+002D (-)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],  # U+002E (.)
    [0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00],  # U+002F (/)
    [0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00],  # U+0030 (0)
    [0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00],  # U+0031 (1)
    [0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00],  # U+0032 (2)
    [0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00],  # U+0033 (3)
    [0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00],  # U+0034 (4)
    [0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00],  # U+0035 (5)
    [0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00],  # U+0036 (6)
    [0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00],  # U+0037 (7)
    [0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00],  # U+0038 (8)
    [0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00],  # U+0039 (9)
    [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00],  # U+003A (:)
    [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06],  # U+003B (;)
    [0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00],  # U+003C (<)
    [0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00],  # U+003D (=)
    [0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00],  # U+003E (>)
    [0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00],  # U+003F (?)
    [0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00],  # U+0040 (@)
    [0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],  # U+0041 (A)
    [0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00],  # U+0042 (B)
    [0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00],  # U+0043 (C)
    [0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00],  # U+0044 (D)
    [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00],  # U+0045 (E)
    [0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00],  # U+0046 (F)
    [0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00],  # U+0047 (G)
    [0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],  # U+0048 (H)
    [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],  # U+0049 (I)
    [0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00],  # U+004A (J)
    [0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00],  # U+004B (K)
    [0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00],  # U+004C (L)
    [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],  # U+004D (M)
    [0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00],  # U+004E (N)
    [0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00],  # U+004F (O)
    [0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00],  # U+0050 (P)
    [0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00],  # U+0051 (Q)
    [0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00],  # U+0052 (R)
    [0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00],  # U+0053 (S)
    [0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],  # U+0054 (T)
    [0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00],  # U+0055 (U)
    [0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],  # U+0056 (V)
    [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],  # U+0057 (W)
    [0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00],  # U+0058 (X)
    [0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00],  # U+0059 (Y)
    [0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00],  # U+005A (Z)
    [0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00],  # U+005B ([)
    [0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00],  # U+005C (\)
    [0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00],  # U+005D (])
    [0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00],  # U+005E (^)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],  # U+005F (_)
    [0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+0060 (`)
    [0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00],  # U+0061 (a)
    [0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00],  # U+0062 (b)
    [0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00],  # U+0063 (c)
    [0x38, 0x30, 0x30, 0x3E, 0x33, 0x33, 0x6E, 0x00],  # U+0064 (d)
    [0x00, 0x00, 0x1E, 0x33, 0x3F, 0x03, 0x1E, 0x00],  # U+0065 (e)
    [0x1C, 0x36, 0x06, 0x0F, 0x06, 0x06, 0x0F, 0x00],  # U+0066 (f)
    [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F],  # U+0067 (g)
    [0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00],  # U+0068 (h)
    [0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],  # U+0069 (i)
    [0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E],  # U+006A (j)
    [0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00],  # U+006B (k)
    [0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],  # U+006C (l)
    [0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00],  # U+006D (m)
    [0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00],  # U+006E (n)
    [0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00],  # U+006F (o)
    [0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F],  # U+0070 (p)
    [0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78],  # U+0071 (q)
    [0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00],  # U+0072 (r)
    [0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00],  # U+0073 (s)
    [0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00],  # U+0074 (t)
    [0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00],  # U+0075 (u)
    [0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],  # U+0076 (v)
    [0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00],  # U+0077 (w)
    [0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00],  # U+0078 (x)
    [0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F],  # U+0079 (y)
    [0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00],  # U+007A (z)
    [0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00],  # U+007B ({)
    [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],  # U+007C (|)
    [0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00],  # U+007D (})
    [0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+007E (~)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  # U+007F
]


def create_canvas():
    canvas = np.zeros(
        (
            N_ROWS * LETTER_BOX_SIZE + 2 * CANVAS_PADDING,
            N_LETTER_PER_ROW * LETTER_BOX_SIZE + 2 * CANVAS_PADDING,
        ),
        dtype=np.uint8,
    )
    return canvas


def write_char_to_canvas(canvas, i, letter):
    r = i // N_LETTER_PER_ROW
    c = i % N_LETTER_PER_ROW

    assert r < N_ROWS
    x_start = CANVAS_PADDING + r * LETTER_BOX_SIZE + PADDING
    y_start = CANVAS_PADDING + c * LETTER_BOX_SIZE + PADDING
    letter_buf = canvas[
        x_start : x_start + LETTER_SIZE, y_start : y_start + LETTER_SIZE
    ]
    for i, line in enumerate(alphabet_bitmap[ord(letter)]):
        for c in range(8):
            letter_buf[i, c] = ((line & (1 << c)) != 0) * 0xFF


def main():
    # Create key canvas by repeating key
    key_canvas = create_canvas()
    key = choices(KEY_ALPHABET, k=KEY_LEN)

    for i, c in zip(
        range(N_LETTER_PER_ROW * (N_ROWS - 1)),
        cycle(key),
    ):
        write_char_to_canvas(key_canvas, i, c)

    # Create flag canvas same as key canvas and then add flag at FLAG_POS
    flag_canvas = create_canvas()
    for i, c in enumerate(
        choices(FLAG_ALPHABET, k=N_LETTER_PER_ROW * (N_ROWS - 1)),
    ):
        write_char_to_canvas(flag_canvas, i, c)
    # Add flag at FLAG_POS
    for i, c in enumerate(FLAG, start=FLAG_POS):
        write_char_to_canvas(flag_canvas, i, c)

    # Add ref to font at the end
    for i, c in enumerate(FONT_REF, start=(N_ROWS * N_LETTER_PER_ROW) - len(FONT_REF)):
        write_char_to_canvas(flag_canvas, i, c)
        
    enc_canvas = flag_canvas ^ key_canvas
    
    # sha256sum  76d6b743196828b8f567e3c068a0114ff66123ca8c8845cf61417813c6cab647  enc.png
    plt.imsave("enc.png", np.stack([enc_canvas] * 3, axis=-1))


if __name__ == "__main__":
    main()
    print(FLAG)
