import org.apache.commons.collections.list.TreeList;

import java.io.*;
import java.lang.management.ManagementFactory;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.util.*;

public class Main {
    TreeList list = new TreeList();
    Scanner scanner = new Scanner(System.in);
    String logPath = "/tmp/dblog.txt";
    String myPid = ManagementFactory.getRuntimeMXBean().getName();

    public Main() {
    }

    private void PrintIntro() {
        System.out.println("Välkommen till prylplatsdatabasen!");
        System.out.println("Powered by " + System.getProperty("java.vm.name") + " " + System.getProperty("java.vm.version"));
    }

    private void PrintMenu() {
        System.out.println("\nAnge val:");
        System.out.println("1. Lista saker");
        System.out.println("2. Lägg till sak");
        System.out.println("3. Ta bort sak");
        System.out.println("");
        System.out.println("4. Exportera databas");
        System.out.println("5. Importera databas");
        System.out.println("");
        System.out.println("6. Visa & rensa logg");
        System.out.println("");
        System.out.println("9. Avsluta");
    }

    public void Run() {
        log("Started!");
        list.add(new Thing("tv", "vardagsrum", 1));
        list.add(new Thing("säng", "sovrum", 1));
        list.add(new Thing("kaffekopp", "kök", 12));

        PrintIntro();

        while (true) {
            try {
                PrintMenu();
                MakeChoice();
            } catch (NoSuchElementException e) {
                System.exit(0);
            }
        }
    }

    private void PrintAll(TreeList l) {
        int i = 1;
        for (Object t: l) {
            Thing thing = (Thing) t;
            System.out.println(String.format("%3d: %-8d %-15.15s @ %-15.15s", i++, thing.quantity, thing.name, thing.location));
        }
    }
    private void MakeChoice() {
        System.out.println();
        int choice = readInt();
        Thing t;

        switch(choice) {
            case 1: // Print all
                System.out.println(list.size() + " saker:");
                PrintAll(list);
                log("Printed all items");
                break;
            case 2: // Add item
                t = new Thing();
                System.out.println("Lägger till ny sak!");
                System.out.print("Ange namn\n> ");
                t.name = scanner.nextLine();
                System.out.print("\nAnge plats\n> ");
                t.location = scanner.nextLine();
                System.out.print("\nAnge antal");
                t.quantity = readInt();
                log("Added item " + t.name);
                list.add(t);
                break;

            case 3: // remove
                System.out.println("Ange nummer för sak att ta bort");
                int index = readInt();
                try {
                    t = (Thing) list.get(index - 1);
                    list.remove(index - 1);
                    log("Removed item " + t.name);
                } catch (Exception e) {
                    System.out.println("Något gick fel.");
                    // e.printStackTrace();
                }
                break;

            case 4: // Export
                ArrayList<Thing> tList = new ArrayList<Thing>();
                tList.addAll(list);
                try {
                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    ObjectOutputStream oos = new ObjectOutputStream(bos);
                    oos.writeObject(tList);
                    oos.close();
                    String exported = Base64.getEncoder().encodeToString(bos.toByteArray());
                    System.out.println(exported);
                    log("Exported db");
                } catch (Exception e) {
                    System.out.println("Något gick fel.");
                    // e.printStackTrace();
                }
                break;

            case 5: // Import
                System.out.println("Mata in tidigare exporterad databas\n> ");
                String dbBase64 = scanner.nextLine();
                try {
                    byte[] dbBytes = Base64.getDecoder().decode(dbBase64);
                    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(dbBytes));
                    Object importedObject = ois.readObject();
                    ArrayList<Thing> al = (ArrayList<Thing>) importedObject;
                    list.clear();
                    list.addAll(al);
                    log("Imported db");
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Något gick fel.");
                }
                break;

            case 6: // Debug
                try {
                    System.out.println("Debug command: dump and clear /tmp/dblog.txt");
                    String log = new String(Files.readAllBytes(Paths.get(logPath)), StandardCharsets.UTF_8);
                    System.out.println(log);
                    Files.deleteIfExists(Paths.get(logPath));
                    Files.createFile(Paths.get(logPath));
                    log("Cleared log");
                }
                catch (Exception e) {
                    System.out.println("Något gick fel.");
                    // e.printStackTrace();
                }
                break;

            default:
                System.out.println("hejdå!");
                System.exit(0);
                break;
        }
    }

    private int readInt() {
        int choice;
        System.out.println();
        while (true) {
            System.out.print("> ");
            if (!scanner.hasNextInt()) {
                // Consume
                scanner.nextLine();
                continue;
            }
            choice = scanner.nextInt();
            scanner.nextLine();
            return choice;
        }
    }

    private void log(String msg) {
        String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
        msg = String.format("%s [%s] ", timeStamp, myPid) + msg + System.lineSeparator();
        try {
            Files.write(Paths.get(logPath), msg.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (Exception e) {
            System.out.println("Något gick fel");
        }
    }

    public static void main(String[] args) {
        Main mainObj = new Main();
        mainObj.Run();
    }
}
